import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as a,a as i,d as e,e as r,f as p,r as l,o as d}from"./app-ptbqs2O5.js";const h="/assets/save-dialog-1CsU4Fd9.png",c="/assets/program-output-CTaZB51D.png",g={};function y(k,t){const o=l("RouteLink");return d(),s("div",null,[t[5]||(t[5]=a('<p>在上一章中，我们介绍了 Python 的交互模式。交互模式主要用作单行代码的执行，而如果想将多行代码依次执行，可以创建程序文件。</p><p>Python 的程序文件后缀名为 <code>.py</code>，可使用 Python 自带的 IDLE 创建。</p><p>打开 IDLE 后，点击左上角的【Files】→【New File】或直接按下 <kbd>Ctrl</kbd> + <kbd>N</kbd> 以创建一个新的 Python 文件。</p><p>新建完成后，你会获得一个空白的文件编辑窗口。</p><p>在此窗口中键入如下代码（请注意，以下的所有符号均为英文半角符号）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码的实际意义将在之后讲解，但现在你只需要将代码原封不动搬进你的文件里即可。</p><p>点击【Files】→【Save】以保存你的文件。请尽量保存到纯英文路径中以保留最好的兼容性。</p><p>点击【Run】→【Run Module】以运行你的代码文件。如果你没有保存，可能会看到下面的提示框。点击【确定】以进行保存（此操作的作用与上方的保存一致）。</p><figure><img src="'+h+'" alt="保存提醒" tabindex="0" loading="lazy"><figcaption>保存提醒</figcaption></figure><p>运行后，你将看到如下的页面。</p><figure><img src="'+c+'" alt="运行结果" tabindex="0" loading="lazy"><figcaption>运行结果</figcaption></figure><p>恭喜你，你已成功编写了自己的第一个 Python 程序！</p><p>在此处，<code>=== RESTART: ... ===</code> 下方的即为程序的输出。不难看出，<code>RESTART:</code> 后方的即为程序文件的实际路径。</p><p>在输出之后，交互模式提示符 <code>&gt;&gt;&gt;</code> 再次出现。这也意味着程序结束了运行。</p><p>下面我们来理解一下程序究竟做了什么。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这段代码的开头，我们使用 <code>print()</code> 调用了 <code>print</code>。<code>print</code> 是 Python 中的内置函数，用于向屏幕输出文字。被双引号括起来的 <code>&quot;Hello, World!&quot;</code> 则是具体需要输出的字符串。在 Python 中，单引号同样可以被用作字符串的定义。即：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello, World!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样可以被用于输出 <code>Hello, World!</code>。</p>',20)),i("p",null,[t[1]||(t[1]=e("本篇仅对 ")),t[2]||(t[2]=i("code",null,"print",-1)),t[3]||(t[3]=e(" 函数作基础了解。若需了解详情请前往 ")),r(o,{to:"/docs/python-basic-blocks/input-output.html"},{default:p(()=>t[0]||(t[0]=[e("输入与输出")])),_:1}),t[4]||(t[4]=e(" 一章。"))])])}const b=n(g,[["render",y],["__file","first-program.html.vue"]]),f=JSON.parse('{"path":"/docs/python-world-intro/first-program.html","title":"第一个 Python 程序","lang":"zh-CN","frontmatter":{"title":"第一个 Python 程序","tag":["Python","Python 世界初窥"],"author":"unDefFtr","description":"在上一章中，我们介绍了 Python 的交互模式。交互模式主要用作单行代码的执行，而如果想将多行代码依次执行，可以创建程序文件。 Python 的程序文件后缀名为 .py，可使用 Python 自带的 IDLE 创建。 打开 IDLE 后，点击左上角的【Files】→【New File】或直接按下 Ctrl + N 以创建一个新的 Python 文件。...","head":[["meta",{"property":"og:url","content":"https://py.hello8693.xyz/docs/python-world-intro/first-program.html"}],["meta",{"property":"og:site_name","content":"Python 教程"}],["meta",{"property":"og:title","content":"第一个 Python 程序"}],["meta",{"property":"og:description","content":"在上一章中，我们介绍了 Python 的交互模式。交互模式主要用作单行代码的执行，而如果想将多行代码依次执行，可以创建程序文件。 Python 的程序文件后缀名为 .py，可使用 Python 自带的 IDLE 创建。 打开 IDLE 后，点击左上角的【Files】→【New File】或直接按下 Ctrl + N 以创建一个新的 Python 文件。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-26T13:00:08.000Z"}],["meta",{"property":"article:author","content":"unDefFtr"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"Python 世界初窥"}],["meta",{"property":"article:modified_time","content":"2024-12-26T13:00:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一个 Python 程序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-26T13:00:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"unDefFtr\\"}]}"]]},"headers":[],"git":{"createdTime":1735204376000,"updatedTime":1735218008000,"contributors":[{"name":"unDefFtr","username":"unDefFtr","email":"undefftr@undefined.ac.cn","commits":2,"url":"https://github.com/unDefFtr"}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"docs/python-world-intro/first-program.md","localizedDate":"2024年12月26日","autoDesc":true}');export{b as comp,f as data};
